"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bx5+2al#^#*z2e%lpn=syg+b0@94+)2yj!un9&p1sx7^x_(cxj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'formatters': {
        'format_debug': {
            'format': '({asctime}) ({levelname}) ({message})',
            'datefmt': '%Y:%m:%d %H:%M:%S',
            'style': '{',
            'validate': True
        },
        'format_warning': {
            'format': '({pathname}) ({asctime}) ({levelname}) ({message})',
            'datefmt': '%Y.%m.%d %H.%M.%S',
            'style': '{',
            'validate': True
        },
        'format_error_critical': {
            'format': '({exc_info}) ({pathname}) ({asctime}) ({levelname}) ({message})',
            'datefmt': '%Y/%m/%d %H/%M/%S',
            'style': '{',
            'validate': True
        },
        'general_log_info': {
            'format': '({asctime}) ({levelname}) ({module})',
            'datefmt': '%Y %m %d %H %M %S',
            'style': '{',
            'validate': True
        },
        'errors_log_error_critical': {
            'format': '({pathname}) ({asctime}) ({levelname}) ({message}) ({stack_info})',
            'datefmt': '%Y %m %d %H %M %S',
            'style': '{',
            'validate': True
        },
        'security_log_info': {
            'format': '({asctime}) ({levelname}) ({module}) ({message})',
            'datefmt': '%Y.%m.%d %H.%M.%S',
            'style': '{',
            'validate': True
        }
    },
    'handlers': {
        'handler_debug': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',
            'formatter': 'format_debug',
            'filters': ['debug_true', ]
        },
        'handler_warning': {
            'class': 'logging.StreamHandler',
            'level': 'WARNING',
            'formatter': 'format_warning',
            'filters': ['debug_true', ]
        },
        'handler_error_critical': {
            'class': 'logging.StreamHandler',
            'level': 'ERROR',
            'formatter': 'format_error_critical',
            'filters': ['debug_true', ]
        },
        'handler_general_log_info': {
            'class': 'logging.FileHandler',
            'level': 'INFO',
            'formatter': 'general_log_info',
            'filename': 'loggers/general.log',
            'filters': ['debug_false', ]
        },
        'handler_errors_log': {
            'class': 'logging.FileHandler',
            'level': 'ERROR',
            'formatter': 'errors_log_error_critical',
            'filename': 'loggers/errors.log'
        },
        'handler_security_log': {
            'class': 'logging.FileHandler',
            'level': 'INFO',
            'formatter': 'security_log_info',
            'filename': 'loggers/security.log'
        },
        'handler_error_request_server': {
            'class': 'django.utils.log.AdminEmailHandler',
            'level': 'ERROR',
            'formatter': 'format_warning',
            'filters': ['debug_false', ]
        }
    },
    'loggers': {
        'django': {
            'handlers': ['handler_debug',
                         'handler_warning',
                         'handler_error_critical',
                         'handler_general_log_info'],
            'propagate': True
        },
        'django.request': {
            'handlers': ['handler_errors_log',
                         'handler_error_request_server', ],
            'propagate': True
        },
        'django.server': {
            'handlers': ['handler_errors_log',
                         'handler_error_request_server', ],
            'propagate': True
        },
        'django.template': {
            'handlers': ['handler_errors_log', ],
            'propagate': True
        },
        'django.db.backends': {
            'handlers': ['handler_errors_log', ],
            'propagate': True
        },
        'django.security': {
            'handlers': ['handler_security_log', ],
            'propagate': True
        }
    }
}




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'news',
    'django_filters',
    'articles',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'NewsPortal.middle.SimpleMiddleware',
]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]





LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/sign/login/'



WSGI_APPLICATION = 'NewsPortal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


STATICFILES_DIRS = [
    BASE_DIR / 'static'
]


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}



EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'danpilnet'
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')



SITE_URL = 'http://127.0.0.1:8000'



APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


CACHES = {
    'default':{
        'TIMEOUT':60,
        'BACKEND':
            'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}